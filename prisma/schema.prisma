datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum Role {
  COMMON
  TECHNICIAN
  MANAGER
  SUPER_ADMIN
}

enum Status {
  OPEN
  ASSIGNED
  IN_PROGRESS
  ON_HOLD // Ex: Aguardando peça
  RESOLVED
  CLOSED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AreaName {
  TI
  BUILDING
  ELECTRICAL
}

// --- MODELOS PRINCIPAIS ---

model User {
  id String @id @default(cuid()) // <-- CORREÇÃO: uuid() mudou para cuid()

  email        String    @unique
  name         String
  passwordHash String
  role         Role      @default(COMMON)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  areaId       String?
  photoUrl     String?
  // Relacionamentos
  area         Area?     @relation(fields: [areaId], references: [id])
  tickets      Ticket[]  @relation("TicketRequester") // Chamados que abriu
  assigned     Ticket[]  @relation("TicketTechnician") // Chamados para atender
  comments     Comment[]

  @@index([areaId])
  @@map("users")
}

model Area {
  id   String   @id @default(cuid())
  name AreaName @unique

  // Relacionamentos
  users    User[]
  tickets  Ticket[]
  comments Comment[]

  @@map("areas")
}

model Ticket {
  id     String @id @default(cuid())
  title  String
  status Status @default(OPEN)

  // Detalhes do chamado (obrigatórios)
  description String
  location    String // Ex: "Sala 301, Bloco B"
  equipment   String // Ex: "Ar Condicionado"
  model       String // Ex: "Samsung Wind-Free"
  assetTag    String // Ex: "N/P 123456"

  priority  Priority @default(MEDIUM)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Chaves Estrangeiras e Relacionamentos
  areaId String
  area   Area   @relation(fields: [areaId], references: [id])

  requesterId String
  requester   User   @relation("TicketRequester", fields: [requesterId], references: [id])

  technicianId String?
  technician   User?   @relation("TicketTechnician", fields: [technicianId], references: [id])

  comments Comment[]

  @@index([areaId])       
  @@index([requesterId])  
  @@index([technicianId])
  @@map("tickets")
}

model Comment {
  id         String   @id @default(cuid())
  text       String
  createdAt  DateTime @default(now())
  isInternal Boolean  @default(false) // Comentário interno (Técnico <-> Gestor)

  // Relacionamentos
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  areaId String
  area   Area   @relation(fields: [areaId], references: [id])

  @@index([ticketId])
  @@index([userId])   
  @@index([areaId])
  @@map("comments")
}
